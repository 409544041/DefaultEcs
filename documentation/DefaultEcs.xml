<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DefaultEcs</name>
    </assembly>
    <members>
        <member name="T:DefaultEcs.Entity">
            <summary>
            Represents an item in the <see cref="T:DefaultEcs.World"/>.
            Only use <see cref="T:DefaultEcs.Entity"/> generated from the <see cref="M:DefaultEcs.World.CreateEntity"/> method.
            </summary>
        </member>
        <member name="M:DefaultEcs.Entity.Set``1(``0@)">
            <summary>
            Sets the value of the component of type <typeparamref name="T"/> on the current <see cref="T:DefaultEcs.Entity"/>.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
            <param name="component">The value of the component.</param>
            <exception cref="T:System.InvalidOperationException">Max number of component of type <typeparamref name="T"/> reached.</exception>
        </member>
        <member name="M:DefaultEcs.Entity.SetSameAs``1(DefaultEcs.Entity@)">
            <summary>
            Sets the value of the component of type <typeparamref name="T"/> on the current Entity to the same instance of an other <see cref="T:DefaultEcs.Entity"/>.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
            <param name="reference">The other <see cref="T:DefaultEcs.Entity"/> used as reference.</param>
            <exception cref="T:System.InvalidOperationException"><see cref="T:DefaultEcs.Entity"/> was not created from a <see cref="T:DefaultEcs.World"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Reference <see cref="T:DefaultEcs.Entity"/> comes from a different <see cref="T:DefaultEcs.World"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Reference <see cref="T:DefaultEcs.Entity"/> does not have a component of type <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:DefaultEcs.Entity.Remove``1">
            <summary>
            Removes the component of type <typeparamref name="T"/> on the current <see cref="T:DefaultEcs.Entity"/>.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
        </member>
        <member name="M:DefaultEcs.Entity.Has``1">
            <summary>
            Returns whether the current <see cref="T:DefaultEcs.Entity"/> has a component of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
            <returns>true if the <see cref="T:DefaultEcs.Entity"/> has a component of type <typeparamref name="T"/>; otherwise, false.</returns>
        </member>
        <member name="M:DefaultEcs.Entity.Get``1">
            <summary>
            Gets the component of type <typeparamref name="T"/> on the current <see cref="T:DefaultEcs.Entity"/>.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
            <returns>A reference to the component.</returns>
            <exception cref="T:System.Exception"><see cref="T:DefaultEcs.Entity"/> was not created from a <see cref="T:DefaultEcs.World"/> or does not have a component of type <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:DefaultEcs.Entity.SetAsChildOf(DefaultEcs.Entity@)">
            <summary>
            Makes it so when given <see cref="T:DefaultEcs.Entity"/> is disposed, current <see cref="T:DefaultEcs.Entity"/> will also be disposed.
            </summary>
            <param name="parent">The <see cref="T:DefaultEcs.Entity"/> which acts as parent.</param>
            <exception cref="T:System.InvalidOperationException"><see cref="T:DefaultEcs.Entity"/> was not created from a <see cref="T:DefaultEcs.World"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Child and parent <see cref="T:DefaultEcs.Entity"/> come from a different <see cref="T:DefaultEcs.World"/>.</exception>
        </member>
        <member name="M:DefaultEcs.Entity.SetAsParentOf(DefaultEcs.Entity@)">
            <summary>
            Makes it so when current <see cref="T:DefaultEcs.Entity"/> is disposed, given <see cref="T:DefaultEcs.Entity"/> will also be disposed.
            </summary>
            <param name="child">The <see cref="T:DefaultEcs.Entity"/> which acts as child.</param>
            <exception cref="T:System.InvalidOperationException"><see cref="T:DefaultEcs.Entity"/> was not created from a <see cref="T:DefaultEcs.World"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Child and parent <see cref="T:DefaultEcs.Entity"/> come from a different <see cref="T:DefaultEcs.World"/>.</exception>
        </member>
        <member name="M:DefaultEcs.Entity.RemoveFromChildrenOf(DefaultEcs.Entity@)">
            <summary>
            Remove the given <see cref="T:DefaultEcs.Entity"/> from current <see cref="T:DefaultEcs.Entity"/> parents.
            </summary>
            <param name="parent">The <see cref="T:DefaultEcs.Entity"/> which acts as parent.</param>
            <exception cref="T:System.InvalidOperationException"><see cref="T:DefaultEcs.Entity"/> was not created from a <see cref="T:DefaultEcs.World"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Child and parent <see cref="T:DefaultEcs.Entity"/> come from a different <see cref="T:DefaultEcs.World"/>.</exception>
        </member>
        <member name="M:DefaultEcs.Entity.RemoveFromParentsOf(DefaultEcs.Entity@)">
            <summary>
            Remove the given <see cref="T:DefaultEcs.Entity"/> from current <see cref="T:DefaultEcs.Entity"/> children.
            </summary>
            <param name="child">The <see cref="T:DefaultEcs.Entity"/> which acts as child.</param>
            <exception cref="T:System.InvalidOperationException"><see cref="T:DefaultEcs.Entity"/> was not created from a <see cref="T:DefaultEcs.World"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Child and parent <see cref="T:DefaultEcs.Entity"/> come from a different <see cref="T:DefaultEcs.World"/>.</exception>
        </member>
        <member name="M:DefaultEcs.Entity.GetChildren">
            <summary>
            Gets all the <see cref="T:DefaultEcs.Entity"/> setted as children of the current <see cref="T:DefaultEcs.Entity"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DefaultEcs.Entity.CopyTo(DefaultEcs.World)">
            <summary>
            Creates a copy of current <see cref="T:DefaultEcs.Entity"/> with all of its components in the given <see cref="T:DefaultEcs.World"/>.
            </summary>
            <param name="world">The <see cref="T:DefaultEcs.World"/> instance to which copy current <see cref="T:DefaultEcs.Entity"/> and its components.</param>
            <returns>The created <see cref="T:DefaultEcs.Entity"/> in the given <see cref="T:DefaultEcs.World"/>.</returns>
            <exception cref="T:System.InvalidOperationException"><see cref="T:DefaultEcs.Entity"/> was not created from a <see cref="T:DefaultEcs.World"/>.</exception>
        </member>
        <member name="M:DefaultEcs.Entity.ReadAllComponents(DefaultEcs.Serialization.IComponentReader)">
            <summary>
            Calls on <paramref name="reader"/> with all the component of the current <see cref="T:DefaultEcs.Entity"/>.
            This method is primiraly used for serialization purpose and should not be called in game logic.
            </summary>
            <param name="reader">The <see cref="T:DefaultEcs.Serialization.IComponentReader"/> instance to be used as callback with the current <see cref="T:DefaultEcs.Entity"/> components.</param>
        </member>
        <member name="M:DefaultEcs.Entity.Dispose">
            <summary>
            Clean the current <see cref="T:DefaultEcs.Entity"/> of all its components.
            The current <see cref="T:DefaultEcs.Entity"/> should not be used again after calling this method.
            </summary>
        </member>
        <member name="M:DefaultEcs.Entity.Equals(DefaultEcs.Entity)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="M:DefaultEcs.Entity.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns>
            true if obj and this instance are the same type and represent the same value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:DefaultEcs.Entity.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:DefaultEcs.EntitySet">
            <summary>
            Represents a sub-selection of <see cref="T:DefaultEcs.Entity"/> instances from a <see cref="T:DefaultEcs.World"/>.
            </summary>
        </member>
        <member name="P:DefaultEcs.EntitySet.Count">
            <summary>
            Gets the numbers of <see cref="T:DefaultEcs.Entity"/> in the current <see cref="T:DefaultEcs.EntitySet"/>.
            </summary>
        </member>
        <member name="M:DefaultEcs.EntitySet.GetEntities">
            <summary>
            Gets the <see cref="T:DefaultEcs.Entity"/> contained in the current <see cref="T:DefaultEcs.EntitySet"/>.
            </summary>
            <returns>A <see cref="T:System.ReadOnlySpan`1"/> of the <see cref="T:DefaultEcs.Entity"/> contained in the current <see cref="T:DefaultEcs.EntitySet"/>.</returns>
        </member>
        <member name="M:DefaultEcs.EntitySet.Dispose">
            <summary>
            Releases current <see cref="T:DefaultEcs.EntitySet"/> of its subscriptions, stopping it to get modifications on the <see cref="T:DefaultEcs.World"/>'s <see cref="T:DefaultEcs.Entity"/>.
            </summary>
        </member>
        <member name="T:DefaultEcs.EntitySetBuilder">
            <summary>
            Represent an helper object to create an <see cref="T:DefaultEcs.EntitySet"/> to retrieve specific subset of <see cref="T:DefaultEcs.Entity"/>.
            </summary>
        </member>
        <member name="M:DefaultEcs.EntitySetBuilder.Build">
            <summary>
            Returns an <see cref="T:DefaultEcs.EntitySet"/> with the specified rules.
            </summary>
            <returns>The <see cref="T:DefaultEcs.EntitySet"/>.</returns>
        </member>
        <member name="M:DefaultEcs.EntitySetBuilder.With``1">
            <summary>
            Makes a rule to observe <see cref="T:DefaultEcs.Entity"/> with a component of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of component.</typeparam>
            <returns>The current <see cref="T:DefaultEcs.EntitySetBuilder"/>.</returns>
        </member>
        <member name="M:DefaultEcs.EntitySetBuilder.Without``1">
            <summary>
            Makes a rule to ignore <see cref="T:DefaultEcs.Entity"/> with a component of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of component.</typeparam>
            <returns>The current <see cref="T:DefaultEcs.EntitySetBuilder"/>.</returns>
        </member>
        <member name="T:DefaultEcs.SubscribeAction`1">
            <summary>
            Encapsulates a method that has a single in parameter and does not return a value used for <see cref="M:DefaultEcs.World.Subscribe``1(DefaultEcs.SubscribeAction{``0})"/> method.
            </summary>
            <typeparam name="T">The type of message to subscribe to.</typeparam>
        </member>
        <member name="T:DefaultEcs.IPublisher">
            <summary>
            Exposes methods to subscribe to <see cref="T:DefaultEcs.SubscribeAction`1"/> and publish message to callback those subscriptions.
            </summary>
        </member>
        <member name="M:DefaultEcs.IPublisher.Subscribe``1(DefaultEcs.SubscribeAction{``0})">
            <summary>
            Subscribes an <see cref="T:DefaultEcs.SubscribeAction`1"/> to be called back when a <typeparamref name="T"/> object is published.
            </summary>
            <typeparam name="T">The type of the object to be called back with.</typeparam>
            <param name="action">The delegate to be called back.</param>
            <returns>An <see cref="T:System.IDisposable"/> object used to unsubscribe.</returns>
        </member>
        <member name="M:DefaultEcs.IPublisher.Publish``1(``0@)">
            <summary>
            Publishes a <typeparamref name="T"/> object.
            </summary>
            <typeparam name="T">The type of the object to publish.</typeparam>
            <param name="message">The object to publish.</param>
        </member>
        <member name="T:DefaultEcs.SubscribeAttribute">
            <summary>
            Specifies that the method should be automatically subscribed when its parent type or instance is called with <see cref="T:DefaultEcs.IPublisherExtension"/>.
            The decorated method should be of the type <see cref="T:DefaultEcs.SubscribeAction`1"/>.
            </summary>
        </member>
        <member name="T:DefaultEcs.IPublisherExtension">
            <summary>
            Provides set of static methods to automatically subscribe <see cref="T:DefaultEcs.SubscribeAction`1"/> methods marked with the <see cref="T:DefaultEcs.SubscribeAttribute"/> on a <see cref="T:DefaultEcs.IPublisher"/>instance.
            </summary>
        </member>
        <member name="M:DefaultEcs.IPublisherExtension.Subscribe(DefaultEcs.IPublisher,System.Type)">
            <summary>
            Subscribes automatically methods of a Type marked with the <see cref="T:DefaultEcs.SubscribeAttribute"/> on an <see cref="T:DefaultEcs.IPublisher"/> instance.
            </summary>
            <param name="publisher">The <see cref="T:DefaultEcs.IPublisher"/> instance.</param>
            <param name="type">The type.</param>
            <returns>A <see cref="T:System.IDisposable"/> to unregister.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="publisher"/> or <paramref name="type"/> is null.</exception>
            <exception cref="T:System.NotSupportedException"><see cref="T:DefaultEcs.SubscribeAttribute"/> is used on an uncompatible method of the instance.</exception>
        </member>
        <member name="M:DefaultEcs.IPublisherExtension.Subscribe``1(DefaultEcs.IPublisher)">
            <summary>
            Subscribes automatically methods of a Type marked with the <see cref="T:DefaultEcs.SubscribeAttribute"/> on an <see cref="T:DefaultEcs.IPublisher"/> instance.
            </summary>
            <typeparam name="T">The Type.</typeparam>
            <param name="publisher">The <see cref="T:DefaultEcs.IPublisher"/> instance.</param>
            <returns>A <see cref="T:System.IDisposable"/> to unregister.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="publisher"/> is null.</exception>
            <exception cref="T:System.NotSupportedException"><see cref="T:DefaultEcs.SubscribeAttribute"/> is used on an uncompatible method of the instance.</exception>
        </member>
        <member name="M:DefaultEcs.IPublisherExtension.Subscribe``1(DefaultEcs.IPublisher,``0)">
            <summary>
            Subscribes automatically methods of an instance and its Type marked with the <see cref="T:DefaultEcs.SubscribeAttribute"/> on an <see cref="T:DefaultEcs.IPublisher"/> instance.
            </summary>
            <typeparam name="T">The Type.</typeparam>
            <param name="publisher">The <see cref="T:DefaultEcs.IPublisher"/> instance.</param>
            <param name="target">The instance.</param>
            <returns>A <see cref="T:System.IDisposable"/> to unregister.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="publisher"/> or <paramref name="target"/> is null.</exception>
            <exception cref="T:System.NotSupportedException"><see cref="T:DefaultEcs.SubscribeAttribute"/> is used on an uncompatible method of the instance.</exception>
        </member>
        <member name="T:DefaultEcs.Serialization.BinarySerializer">
            <summary>
            Provides a basic implementation of the <see cref="T:DefaultEcs.Serialization.ISerializer"/> interface using a binary format.
            </summary>
        </member>
        <member name="M:DefaultEcs.Serialization.BinarySerializer.Write``1(System.IO.Stream,``0@)">
            <summary>
            Writes an object of type <typeparamref name="T"/> on the given stream.
            </summary>
            <typeparam name="T">The type of the object serialized.</typeparam>
            <param name="stream">The <see cref="T:System.IO.Stream"/> instance on which the object is to be serialized.</param>
            <param name="obj">The object to serialize.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.Serialization.BinarySerializer.Read``1(System.IO.Stream)">
            <summary>
            Read an object of type <typeparamref name="T"/> from the given stream.
            </summary>
            <typeparam name="T">The type of the object deserialized.</typeparam>
            <param name="stream">The <see cref="T:System.IO.Stream"/> instance from which the object is to be deserialized.</param>
            <returns>The object deserialized.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.Serialization.BinarySerializer.Serialize(System.IO.Stream,DefaultEcs.World)">
            <summary>
            Serializes the given <see cref="T:DefaultEcs.World"/> into the provided <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> in which the data will be saved.</param>
            <param name="world">The <see cref="T:DefaultEcs.World"/> instance to save.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="world"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.Serialization.BinarySerializer.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes a <see cref="T:DefaultEcs.World"/> instance from the given <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> from which the data will be loaded.</param>
            <returns>The <see cref="T:DefaultEcs.World"/> instance loaded.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.Serialization.BinarySerializer.Serialize(System.IO.Stream,System.Collections.Generic.IEnumerable{DefaultEcs.Entity})">
            <summary>
            Serializes the given <see cref="T:DefaultEcs.Entity"/> instances with their components into the provided <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> in which the data will be saved.</param>
            <param name="entities">The <see cref="T:DefaultEcs.Entity"/> instances to save.</param>
        </member>
        <member name="M:DefaultEcs.Serialization.BinarySerializer.Deserialize(System.IO.Stream,DefaultEcs.World)">
            <summary>
            Deserializes <see cref="T:DefaultEcs.Entity"/> instances with their components from the given <see cref="T:System.IO.Stream"/> into the given <see cref="T:DefaultEcs.World"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> from which the data will be loaded.</param>
            <param name="world">The <see cref="T:DefaultEcs.World"/> instance on which the <see cref="T:DefaultEcs.Entity"/> will be created.</param>
            <returns>The <see cref="T:DefaultEcs.Entity"/> instances loaded.</returns>
        </member>
        <member name="T:DefaultEcs.Serialization.IComponentReader">
            <summary>
            Exposes a method to be called back when getting an <see cref="T:DefaultEcs.Entity"/> components, primarly used for serialization purpose.
            </summary>
        </member>
        <member name="M:DefaultEcs.Serialization.IComponentReader.OnRead``1(``0@,DefaultEcs.Entity@)">
            <summary>
            Processes the component of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of component.</typeparam>
            <param name="component">The component.</param>
            <param name="componentOwner">The owner of the component instance, in case it is used by multiple <see cref="T:DefaultEcs.Entity"/>.</param>
        </member>
        <member name="T:DefaultEcs.Serialization.IComponentTypeReader">
            <summary>
            Exposes a method to be called back when getting the maximum number of component of a <see cref="T:DefaultEcs.World"/>, primarly used for serialization purpose.
            </summary>
        </member>
        <member name="M:DefaultEcs.Serialization.IComponentTypeReader.OnRead``1(System.Int32)">
            <summary>
            Processes the maximum number of component of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of component.</typeparam>
            <param name="maxComponentCount">The maximum number of component of type <typeparamref name="T"/>.</param>
        </member>
        <member name="T:DefaultEcs.Serialization.ISerializerExtension">
            <summary>
            Provides extension methods to the <see cref="T:DefaultEcs.Serialization.ISerializer"/> type.
            </summary>
        </member>
        <member name="M:DefaultEcs.Serialization.ISerializerExtension.Serialize(DefaultEcs.Serialization.ISerializer,System.IO.Stream,DefaultEcs.Entity[])">
            <summary>
            Serializes the given <see cref="T:DefaultEcs.Entity"/> instances with their components into the provided <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="serializer">The <see cref="T:DefaultEcs.Serialization.ISerializer"/> instance to use.</param>
            <param name="stream">The <see cref="T:System.IO.Stream"/> in which the data will be saved.</param>
            <param name="entities">The <see cref="T:DefaultEcs.Entity"/> instances to save.</param>
        </member>
        <member name="T:DefaultEcs.Serialization.ISerializer">
            <summary>
            Provides a set of methods to save and load DefaultEcs objects.
            </summary>
        </member>
        <member name="M:DefaultEcs.Serialization.ISerializer.Serialize(System.IO.Stream,DefaultEcs.World)">
            <summary>
            Serializes the given <see cref="T:DefaultEcs.World"/> into the provided <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> in which the data will be saved.</param>
            <param name="world">The <see cref="T:DefaultEcs.World"/> instance to save.</param>
        </member>
        <member name="M:DefaultEcs.Serialization.ISerializer.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes a <see cref="T:DefaultEcs.World"/> instance from the given <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> from which the data will be loaded.</param>
            <returns>The <see cref="T:DefaultEcs.World"/> instance loaded.</returns>
        </member>
        <member name="M:DefaultEcs.Serialization.ISerializer.Serialize(System.IO.Stream,System.Collections.Generic.IEnumerable{DefaultEcs.Entity})">
            <summary>
            Serializes the given <see cref="T:DefaultEcs.Entity"/> instances with their components into the provided <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> in which the data will be saved.</param>
            <param name="entities">The <see cref="T:DefaultEcs.Entity"/> instances to save.</param>
        </member>
        <member name="M:DefaultEcs.Serialization.ISerializer.Deserialize(System.IO.Stream,DefaultEcs.World)">
            <summary>
            Deserializes <see cref="T:DefaultEcs.Entity"/> instances with their components from the given <see cref="T:System.IO.Stream"/> into the given <see cref="T:DefaultEcs.World"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> from which the data will be loaded.</param>
            <param name="world">The <see cref="T:DefaultEcs.World"/> instance on which the <see cref="T:DefaultEcs.Entity"/> will be created.</param>
            <returns>The <see cref="T:DefaultEcs.Entity"/> instances loaded.</returns>
        </member>
        <member name="T:DefaultEcs.Serialization.TextSerializer">
            <summary>
            Provides a basic implementation of the <see cref="T:DefaultEcs.Serialization.ISerializer"/> interface using a text readable format.
            </summary>
        </member>
        <member name="M:DefaultEcs.Serialization.TextSerializer.Write``1(System.IO.Stream,``0@)">
            <summary>
            Writes an object of type <typeparamref name="T"/> on the given stream.
            </summary>
            <typeparam name="T">The type of the object serialized.</typeparam>
            <param name="stream">The <see cref="T:System.IO.Stream"/> instance on which the object is to be serialized.</param>
            <param name="obj">The object to serialize.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.Serialization.TextSerializer.Read``1(System.IO.Stream)">
            <summary>
            Read an object of type <typeparamref name="T"/> from the given stream.
            </summary>
            <typeparam name="T">The type of the object deserialized.</typeparam>
            <param name="stream">The <see cref="T:System.IO.Stream"/> instance from which the object is to be deserialized.</param>
            <returns>The object deserialized.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.Serialization.TextSerializer.Serialize(System.IO.Stream,DefaultEcs.World)">
            <summary>
            Serializes the given <see cref="T:DefaultEcs.World"/> into the provided <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> in which the data will be saved.</param>
            <param name="world">The <see cref="T:DefaultEcs.World"/> instance to save.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="world"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.Serialization.TextSerializer.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes a <see cref="T:DefaultEcs.World"/> instance from the given <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> from which the data will be loaded.</param>
            <returns>The <see cref="T:DefaultEcs.World"/> instance loaded.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.Serialization.TextSerializer.Serialize(System.IO.Stream,System.Collections.Generic.IEnumerable{DefaultEcs.Entity})">
            <summary>
            Serializes the given <see cref="T:DefaultEcs.Entity"/> instances with their components into the provided <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> in which the data will be saved.</param>
            <param name="entities">The <see cref="T:DefaultEcs.Entity"/> instances to save.</param>
        </member>
        <member name="M:DefaultEcs.Serialization.TextSerializer.Deserialize(System.IO.Stream,DefaultEcs.World)">
            <summary>
            Deserializes <see cref="T:DefaultEcs.Entity"/> instances with their components from the given <see cref="T:System.IO.Stream"/> into the given <see cref="T:DefaultEcs.World"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> from which the data will be loaded.</param>
            <param name="world">The <see cref="T:DefaultEcs.World"/> instance on which the <see cref="T:DefaultEcs.Entity"/> will be created.</param>
            <returns>The <see cref="T:DefaultEcs.Entity"/> instances loaded.</returns>
        </member>
        <member name="T:DefaultEcs.System.AComponentSystem`2">
            <summary>
            Represents a base class to process updates on a given <see cref="T:DefaultEcs.World"/> instance to all its components of type <typeparamref name="TComponent"/>.
            </summary>
            <typeparam name="TState">The type of the object used as state to update the system.</typeparam>
            <typeparam name="TComponent">The type of component to update.</typeparam>
        </member>
        <member name="M:DefaultEcs.System.AComponentSystem`2.#ctor(DefaultEcs.World,DefaultEcs.System.SystemRunner{`0})">
            <summary>
            Initialise a new instance of the <see cref="T:DefaultEcs.System.AComponentSystem`2"/> class with the given <see cref="T:DefaultEcs.World"/> and <see cref="T:DefaultEcs.System.SystemRunner`1"/>.
            </summary>
            <param name="world">The <see cref="T:DefaultEcs.World"/> on which to process the update.</param>
            <param name="runner">The <see cref="T:DefaultEcs.System.SystemRunner`1"/> used to process the update in parallel if not null.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="world"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.System.AComponentSystem`2.#ctor(DefaultEcs.World)">
            <summary>
            Initialise a new instance of the <see cref="T:DefaultEcs.System.AComponentSystem`2"/> class with the given <see cref="T:DefaultEcs.World"/>.
            </summary>
            <param name="world">The <see cref="T:DefaultEcs.World"/> on which to process the update.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="world"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.System.AComponentSystem`2.Update(`0,`1@)">
            <summary>
            Update the given <typeparamref name="TComponent"/> once.
            </summary>
            <param name="state">The state to use.</param>
            <param name="component">The <typeparamref name="TComponent"/> to update.</param>
        </member>
        <member name="M:DefaultEcs.System.AComponentSystem`2.Update(`0,System.Span{`1})">
            <summary>
            Update the given <typeparamref name="TComponent"/> once.
            </summary>
            <param name="state">The state to use.</param>
            <param name="components">The <typeparamref name="TComponent"/> to update.</param>
        </member>
        <member name="M:DefaultEcs.System.AComponentSystem`2.Dispose">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="T:DefaultEcs.System.ActionSystem`1">
            <summary>
            Represents a class to set up easily a custom action as a system update.
            </summary>
            <typeparam name="T">The type of the object used as state to update the system.</typeparam>
        </member>
        <member name="M:DefaultEcs.System.ActionSystem`1.#ctor(System.Action{`0})">
            <summary>
            Initialises a new instance of the <see cref="T:DefaultEcs.System.ActionSystem`1"/> class with the given <see cref="T:System.Action`1"/>.
            </summary>
            <param name="action">The <see cref="T:System.Action`1"/> to call as update.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.System.ActionSystem`1.Update(`0)">
            <summary>
            Updates the system once.
            </summary>
            <param name="state">The state to use.</param>
        </member>
        <member name="M:DefaultEcs.System.ActionSystem`1.Dispose">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="T:DefaultEcs.System.ComponentAttribute">
            <summary>
            Represents the base attribute to declare how to build the inner <see cref="T:DefaultEcs.EntitySet"/> of <see cref="T:DefaultEcs.System.AEntitySystem`1"/> when giving a <see cref="T:DefaultEcs.World"/> instance.
            </summary>
        </member>
        <member name="F:DefaultEcs.System.ComponentAttribute.ComponentTypes">
            <summary>
            The types of the component.
            </summary>
        </member>
        <member name="F:DefaultEcs.System.ComponentAttribute.Include">
            <summary>
            Whether the component type should be included or excluded.
            </summary>
        </member>
        <member name="M:DefaultEcs.System.ComponentAttribute.#ctor(System.Boolean,System.Type[])">
            <summary>
            Initialize a new instance of the <see cref="T:DefaultEcs.System.ComponentAttribute"/> type.
            </summary>
            <param name="include">Whether the component type should be included or excluded.</param>
            <param name="componentTypes">The types of the component.</param>
        </member>
        <member name="T:DefaultEcs.System.WithAttribute">
            <summary>
            Represents a component type to include when building the inner <see cref="T:DefaultEcs.EntitySet"/> of <see cref="T:DefaultEcs.System.AEntitySystem`1"/> when giving a <see cref="T:DefaultEcs.World"/> instance.
            </summary>
        </member>
        <member name="M:DefaultEcs.System.WithAttribute.#ctor(System.Type[])">
            <summary>
            Initialize a new instance of the <see cref="T:DefaultEcs.System.WithAttribute"/> type.
            </summary>
            <param name="componentTypes">The types of the component to include.</param>
        </member>
        <member name="T:DefaultEcs.System.WithoutAttribute">
            <summary>
            Represents a component type to exclude when building the inner <see cref="T:DefaultEcs.EntitySet"/> of <see cref="T:DefaultEcs.System.AEntitySystem`1"/> when giving a <see cref="T:DefaultEcs.World"/> instance.
            </summary>
        </member>
        <member name="M:DefaultEcs.System.WithoutAttribute.#ctor(System.Type[])">
            <summary>
            Initialize a new instance of the <see cref="T:DefaultEcs.System.WithoutAttribute"/> type.
            </summary>
            <param name="componentTypes">The types of the component to exclude.</param>
        </member>
        <member name="T:DefaultEcs.System.AEntitySystem`1">
            <summary>
            Represents a base class to process updates on a given <see cref="T:DefaultEcs.EntitySet"/> instance.
            </summary>
            <typeparam name="T">The type of the object used as state to update the system.</typeparam>
        </member>
        <member name="M:DefaultEcs.System.AEntitySystem`1.#ctor(DefaultEcs.EntitySet,DefaultEcs.System.SystemRunner{`0})">
            <summary>
            Initialise a new instance of the <see cref="T:DefaultEcs.System.AEntitySystem`1"/> class with the given <see cref="T:DefaultEcs.EntitySet"/> and <see cref="T:DefaultEcs.System.SystemRunner`1"/>.
            </summary>
            <param name="set">The <see cref="T:DefaultEcs.EntitySet"/> on which to process the update.</param>
            <param name="runner">The <see cref="T:DefaultEcs.System.SystemRunner`1"/> used to process the update in parallel if not null.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="set"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.System.AEntitySystem`1.#ctor(DefaultEcs.EntitySet)">
            <summary>
            Initialise a new instance of the <see cref="T:DefaultEcs.System.AEntitySystem`1"/> class with the given <see cref="T:DefaultEcs.EntitySet"/>.
            </summary>
            <param name="set">The <see cref="T:DefaultEcs.EntitySet"/> on which to process the update.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="set"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.System.AEntitySystem`1.#ctor(DefaultEcs.World,DefaultEcs.System.SystemRunner{`0})">
            <summary>
            Initialise a new instance of the <see cref="T:DefaultEcs.System.AEntitySystem`1"/> class with the given <see cref="T:DefaultEcs.World"/>.
            To create the inner <see cref="T:DefaultEcs.EntitySet"/>, <see cref="T:DefaultEcs.System.WithAttribute"/> and <see cref="T:DefaultEcs.System.WithoutAttribute"/> attributes will be used.
            </summary>
            <param name="world">The <see cref="T:DefaultEcs.World"/> from which to get the <see cref="T:DefaultEcs.Entity"/> instances to process the update.</param>
            <param name="runner">The <see cref="T:DefaultEcs.System.SystemRunner`1"/> used to process the update in parallel if not null.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="world"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.System.AEntitySystem`1.#ctor(DefaultEcs.World)">
            <summary>
            Initialise a new instance of the <see cref="T:DefaultEcs.System.AEntitySystem`1"/> class with the given <see cref="T:DefaultEcs.World"/>.
            To create the inner <see cref="T:DefaultEcs.EntitySet"/>, <see cref="T:DefaultEcs.System.WithAttribute"/> and <see cref="T:DefaultEcs.System.WithoutAttribute"/> attributes will be used.
            </summary>
            <param name="world">The <see cref="T:DefaultEcs.World"/> from which to get the <see cref="T:DefaultEcs.Entity"/> instances to process the update.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="world"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.System.AEntitySystem`1.Update(`0,DefaultEcs.Entity@)">
            <summary>
            Update the given <see cref="T:DefaultEcs.Entity"/> instance once.
            </summary>
            <param name="state">The state to use.</param>
            <param name="entity">The <see cref="T:DefaultEcs.Entity"/> instance to update.</param>
        </member>
        <member name="M:DefaultEcs.System.AEntitySystem`1.Update(`0,System.ReadOnlySpan{DefaultEcs.Entity})">
            <summary>
            Update the given <see cref="T:DefaultEcs.Entity"/> instances once.
            </summary>
            <param name="state">The state to use.</param>
            <param name="entities">The <see cref="T:DefaultEcs.Entity"/> instances to update.</param>
        </member>
        <member name="M:DefaultEcs.System.AEntitySystem`1.Dispose">
            <summary>
            Disposes of the inner <see cref="T:DefaultEcs.EntitySet"/> instance.
            </summary>
        </member>
        <member name="T:DefaultEcs.System.ASystem`1">
            <summary>
            Represents a base class to process updates, supporting a <see cref="T:DefaultEcs.System.SystemRunner`1"/>. Do not inherit from this class directly.
            </summary>
            <typeparam name="T">The type of the object used as state to update the system.</typeparam>
        </member>
        <member name="M:DefaultEcs.System.ASystem`1.#ctor(DefaultEcs.System.SystemRunner{`0})">
            <summary>
            Initialise a new instance of the <see cref="T:DefaultEcs.System.ASystem`1"/> class with the given <see cref="T:DefaultEcs.System.SystemRunner`1"/>.
            </summary>
            <param name="runner">The <see cref="T:DefaultEcs.System.SystemRunner`1"/> used to process the update in parallel if not null.</param>
        </member>
        <member name="M:DefaultEcs.System.ASystem`1.#ctor">
            <summary>
            Initialise a new instance of the <see cref="T:DefaultEcs.System.ASystem`1"/> class.
            </summary>
        </member>
        <member name="M:DefaultEcs.System.ASystem`1.PreUpdate(`0)">
            <summary>
            Performs a pre-update treatment.
            </summary>
            <param name="state">The state to use.</param>
        </member>
        <member name="M:DefaultEcs.System.ASystem`1.PostUpdate(`0)">
            <summary>
            Performs a post-update treatment.
            </summary>
            <param name="state">The state to use.</param>
        </member>
        <member name="M:DefaultEcs.System.ASystem`1.Update(`0)">
            <summary>
            Updates the system once.
            </summary>
            <param name="state">The state to use.</param>
        </member>
        <member name="M:DefaultEcs.System.ASystem`1.Dispose">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="T:DefaultEcs.System.ISystem`1">
            <summary>
            Exposes a method to update a system.
            </summary>
            <typeparam name="T">The type of the object used as state to update the system.</typeparam>
        </member>
        <member name="M:DefaultEcs.System.ISystem`1.Update(`0)">
            <summary>
            Updates the system once.
            </summary>
            <param name="state">The state to use.</param>
        </member>
        <member name="T:DefaultEcs.System.ParallelSystem`1">
            <summary>
            Represents a collection of <see cref="T:DefaultEcs.System.ISystem`1"/> to update in parallel.
            </summary>
            <typeparam name="T">The type of the object used as state to update the systems.</typeparam>
        </member>
        <member name="M:DefaultEcs.System.ParallelSystem`1.#ctor(DefaultEcs.System.ISystem{`0},DefaultEcs.System.SystemRunner{`0},DefaultEcs.System.ISystem{`0}[])">
            <summary>
            Initialises a new instance of the <see cref="T:DefaultEcs.System.ParallelSystem`1"/> class.
            </summary>
            <param name="mainSystem">The <see cref="T:DefaultEcs.System.ISystem`1"/> instance to be updated on the calling thread.</param>
            <param name="runner">The <see cref="T:DefaultEcs.System.SystemRunner`1"/> used to process the update in parallel if not null.</param>
            <param name="systems">The <see cref="T:DefaultEcs.System.ISystem`1"/> instances.</param>
        </member>
        <member name="M:DefaultEcs.System.ParallelSystem`1.#ctor(DefaultEcs.System.SystemRunner{`0},DefaultEcs.System.ISystem{`0}[])">
            <summary>
            Initialises a new instance of the <see cref="T:DefaultEcs.System.ParallelSystem`1"/> class.
            </summary>
            <param name="runner">The <see cref="T:DefaultEcs.System.SystemRunner`1"/> used to process the update in parallel if not null.</param>
            <param name="systems">The <see cref="T:DefaultEcs.System.ISystem`1"/> instances.</param>
        </member>
        <member name="M:DefaultEcs.System.ParallelSystem`1.PreUpdate(`0)">
            <summary>
            Performs a pre-update treatment.
            </summary>
            <param name="state">The state to use.</param>
        </member>
        <member name="M:DefaultEcs.System.ParallelSystem`1.Dispose">
            <summary>
            Disposes all the inner <see cref="T:DefaultEcs.System.ISystem`1"/> instances.
            </summary>
        </member>
        <member name="T:DefaultEcs.System.SequentialSystem`1">
            <summary>
            Represents a collection of <see cref="T:DefaultEcs.System.ISystem`1"/> to update sequentially.
            </summary>
            <typeparam name="T">The type of the object used as state to update the systems.</typeparam>
        </member>
        <member name="M:DefaultEcs.System.SequentialSystem`1.#ctor(DefaultEcs.System.ISystem{`0}[])">
            <summary>
            Initialises a new instance of the <see cref="T:DefaultEcs.System.SequentialSystem`1"/> class.
            </summary>
            <param name="systems">The <see cref="T:DefaultEcs.System.ISystem`1"/> instances.</param>
        </member>
        <member name="M:DefaultEcs.System.SequentialSystem`1.Update(`0)">
            <summary>
            Updates all the systems once sequentially.
            </summary>
            <param name="state">The state to use.</param>
        </member>
        <member name="M:DefaultEcs.System.SequentialSystem`1.Dispose">
            <summary>
            Disposes all the inner <see cref="T:DefaultEcs.System.ISystem`1"/> instances.
            </summary>
        </member>
        <member name="T:DefaultEcs.System.SystemRunner`1">
            <summary>
            Represents an helper object used to update a system in parallel.
            </summary>
            <typeparam name="T">The type of the object used as state to update the system.</typeparam>
        </member>
        <member name="M:DefaultEcs.System.SystemRunner`1.#ctor(System.Int32)">
            <summary>
            Initialises a new instance of the <see cref="T:DefaultEcs.System.SystemRunner`1"/> class.
            </summary>
            <param name="degreeOfParallelism">The number of <see cref="T:System.Threading.Tasks.Task"/> instances used to update a system in parallel.</param>
            <exception cref="T:System.ArgumentException"><paramref name="degreeOfParallelism"/> cannot be inferior to one.</exception>
        </member>
        <member name="M:DefaultEcs.System.SystemRunner`1.Dispose">
            <summary>
            Releases all the resources used by the current <see cref="T:DefaultEcs.System.SystemRunner`1"/> instance.
            </summary>
        </member>
        <member name="T:DefaultEcs.World">
            <summary>
            Represents a item use to create and manage <see cref="T:DefaultEcs.Entity"/> objects.
            </summary>
        </member>
        <member name="P:DefaultEcs.World.MaxEntityCount">
            <summary>
            Gets the maximum number of <see cref="T:DefaultEcs.Entity"/> this <see cref="T:DefaultEcs.World"/> can create.
            </summary>
        </member>
        <member name="M:DefaultEcs.World.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DefaultEcs.World"/> class.
            </summary>
            <param name="maxEntityCount">The maximum number of <see cref="T:DefaultEcs.Entity"/> that can exist in this <see cref="T:DefaultEcs.World"/>.</param>
            <exception cref="T:System.ArgumentException"><paramref name="maxEntityCount"/> cannot be negative.</exception>
        </member>
        <member name="M:DefaultEcs.World.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DefaultEcs.World"/> class.
            </summary>
        </member>
        <member name="M:DefaultEcs.World.CreateEntity">
            <summary>
            Creates a new instance of the <see cref="T:DefaultEcs.Entity"/> struct.
            </summary>
            <returns>The created <see cref="T:DefaultEcs.Entity"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Max number of <see cref="T:DefaultEcs.Entity"/> reached.</exception>
        </member>
        <member name="M:DefaultEcs.World.SetMaximumComponentCount``1(System.Int32)">
            <summary>
            Sets up the current <see cref="T:DefaultEcs.World"/> to handle component of type <typeparamref name="T"/> with a different maximum count than <see cref="P:DefaultEcs.World.MaxEntityCount"/>.
            If the type of component is already handled by the current <see cref="T:DefaultEcs.World"/>, does nothing.
            </summary>
            <typeparam name="T">The type of component.</typeparam>
            <param name="maxComponentCount">The maximum number of component of type <typeparamref name="T"/> that can exist in this <see cref="T:DefaultEcs.World"/>.</param>
            <returns>Whether the maximum count has been setted or not.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="maxComponentCount"/> cannot be negative.</exception>
        </member>
        <member name="M:DefaultEcs.World.GetMaximumComponentCount``1">
            <summary>
            Gets the maximum number of <typeparamref name="T"/> components this <see cref="T:DefaultEcs.World"/> can create.
            Returns a negative value if there is no limit.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:DefaultEcs.World.GetAllComponents``1">
            <summary>
            Gets all the component of a given type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of component.</typeparam>
            <returns>A <see cref="T:System.Span`1"/> pointing directly to the component values to edit them.</returns>
        </member>
        <member name="M:DefaultEcs.World.GetEntities">
            <summary>
            Gets an <see cref="T:DefaultEcs.EntitySetBuilder"/> to create a subset of <see cref="T:DefaultEcs.Entity"/> of the current <see cref="T:DefaultEcs.World"/>.
            </summary>
            <returns>An <see cref="T:DefaultEcs.EntitySetBuilder"/>.</returns>
        </member>
        <member name="M:DefaultEcs.World.GetAllEntities">
            <summary>
            Get all the <see cref="T:DefaultEcs.Entity"/> of the current <see cref="T:DefaultEcs.World"/>.
            This method is primiraly used for serialization purpose and should not be called in game logic.
            </summary>
            <returns>All the <see cref="T:DefaultEcs.Entity"/> of the current <see cref="T:DefaultEcs.World"/>.</returns>
        </member>
        <member name="M:DefaultEcs.World.ReadAllComponentTypes(DefaultEcs.Serialization.IComponentTypeReader)">
            <summary>
            Calls on <paramref name="reader"/> with all the maximum number of component of the current <see cref="T:DefaultEcs.World"/>.
            This method is primiraly used for serialization purpose and should not be called in game logic.
            </summary>
            <param name="reader">The <see cref="T:DefaultEcs.Serialization.IComponentTypeReader"/> instance to be used as callback with the current <see cref="T:DefaultEcs.World"/> maximum number of component.</param>
        </member>
        <member name="M:DefaultEcs.World.Subscribe``1(DefaultEcs.SubscribeAction{``0})">
            <summary>
            Subscribes an <see cref="T:DefaultEcs.SubscribeAction`1"/> to be called back when a <typeparamref name="T"/> object is published.
            </summary>
            <typeparam name="T">The type of the object to be called back with.</typeparam>
            <param name="action">The delegate to be called back.</param>
            <returns>An <see cref="T:System.IDisposable"/> object used to unsubscribe.</returns>
        </member>
        <member name="M:DefaultEcs.World.Publish``1(``0@)">
            <summary>
            Publishes a <typeparamref name="T"/> object.
            </summary>
            <typeparam name="T">The type of the object to publish.</typeparam>
            <param name="message">The object to publish.</param>
        </member>
        <member name="M:DefaultEcs.World.Dispose">
            <summary>
            Cleans up all the components of existing <see cref="T:DefaultEcs.Entity"/>.
            The current <see cref="T:DefaultEcs.World"/>, all <see cref="T:DefaultEcs.Entity"/> and <see cref="T:DefaultEcs.EntitySet"/> created from this instance, should not be used again after calling this method.
            </summary>
        </member>
    </members>
</doc>
